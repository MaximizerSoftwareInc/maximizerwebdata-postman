{
	"info": {
		"name": "System",
		"_postman_id": "088990aa-ab4d-4240-b207-1a69e97a4381",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Session",
			"description": null,
			"item": [
				{
					"name": "GetSessionInfo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "93b127d3-a765-46ad-9170-610bbbec27a3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a10fa3d1-33f5-464c-a3f3-bdd879cc00bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Token\":\"{{Token}}\",\r\n    \"User\":{\r\n        \"Key\":{\r\n            \"Value\":1,\r\n            \"UID\":1\r\n        },\r\n        \"DisplayName\":1\r\n    },\r\n    \"AddressBook\":{\r\n        \"UDBID\":1,\r\n        \"Database\":1,\r\n        \"DisplayValue\":1\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{BaseURL}}/Data.svc/json/GetSessionInfo",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Data.svc",
								"json",
								"GetSessionInfo"
							]
						},
						"description": "Use the `GetSessionInfo` method to retrieve information about the current user and Address Book database based on the token supplied in the request."
					},
					"response": []
				}
			]
		},
		{
			"name": "System",
			"description": null,
			"item": [
				{
					"name": "GetSystemInfo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3a00a69-b335-4c59-becc-20b0ad29e1cf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a10fa3d1-33f5-464c-a3f3-bdd879cc00bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BaseURL}}/Data.svc/json/GetSystemInfo",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Data.svc",
								"json",
								"GetSystemInfo"
							]
						},
						"description": "Use the `GetSystemInfo` method to get information about the system, including the current API version and the versions of API components.\n\nNOTE: The `GetSystemInfo` method does not require authentication and does not take any parameters, so you don't need to supply a token or a request body when calling it."
					},
					"response": []
				}
			]
		},
		{
			"name": "AuditLog",
			"description": null,
			"item": [
				{
					"name": "Read Audit Log Entries (Simple)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5c830d2-115c-44ef-8ef3-4b0832019a18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Token\":\"{{Token}}\",\r\n   \"AuditLog\":{\r\n      \"Criteria\":{\r\n         \"SearchQuery\":{\r\n            \"CreationDate\":{\r\n               \"$RANGE\":[\r\n                  \"2018-01-01\",\r\n                  \"2018-01-31\"\r\n               ]\r\n            }\r\n         }\r\n      },\r\n      \"Scope\":{\r\n         \"Fields\":{\r\n            \"CreationDate\":1,\r\n            \"Creator\":1,\r\n            \"Application\":1,\r\n            \"OPID\":1,\r\n            \"Type\":1,\r\n            \"Source\":1,\r\n            \"Info\":1,\r\n            \"Org\":1,\r\n            \"New\":1\r\n         }\r\n      }\r\n   }\r\n}"
						},
						"url": {
							"raw": "{{BaseURL}}/Data.svc/json/AuditLogRead",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Data.svc",
								"json",
								"AuditLogRead"
							]
						},
						"description": "Use the `AuditLogRead` method to search for audit log records in the database."
					},
					"response": []
				},
				{
					"name": "Read Audit Log Entries (Detailed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5c830d2-115c-44ef-8ef3-4b0832019a18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"Token\":\"{{Token}}\",\r\n   \"AuditLog\":{\r\n      \"Criteria\":{\r\n         \"SearchQuery\":{\r\n            \"$AND\":[\r\n               {\r\n                  \"CreationDate\":{\r\n                     \"$RANGE\":[\r\n                        \"2018-01-01T00:00:00-08:00\",\r\n                        \"2018-01-31T23:59:59-08:00\"\r\n                     ]\r\n                  }\r\n               },\r\n               {\r\n                  \"Source\":{\r\n                     \"$EQ\":\"AbEntry\"\r\n                  }\r\n               }\r\n            ]\r\n         }\r\n      },\r\n      \"Scope\":{\r\n         \"Fields\":{\r\n            \"CreationDate\":{\r\n               \"Value\":1,\r\n               \"DisplayValue\":1\r\n            },\r\n            \"Creator\":{\r\n               \"Key\":1,\r\n               \"UID\":1,\r\n               \"DisplayName\":1\r\n            },\r\n            \"Application\":1,\r\n            \"OPID\":1,\r\n            \"Type\":1,\r\n            \"Source\":1,\r\n            \"Info\":1,\r\n            \"Org\":{\r\n               \"AbEntry\":{\r\n                  \"Key\":{\r\n                     \"Value\":1,\r\n                     \"ID\":1,\r\n                     \"Number\":1,\r\n                     \"EntityType\":1\r\n                  },\r\n                  \"Type\":1,\r\n                  \"CompanyName\":1,\r\n                  \"FirstName\":1,\r\n                  \"MiddleName\":1,\r\n                  \"LastName\":1,\r\n                  \"Phone\":1,\r\n                  \"Email\":1,\r\n                  \"Creator\":1,\r\n                  \"CreationDate\":1,\r\n                  \"ModifiedBy\":1,\r\n                  \"LastModifyDate\":1\r\n               }\r\n            },\r\n            \"New\":{\r\n               \"AbEntry\":{\r\n                  \"Key\":{\r\n                     \"Value\":1,\r\n                     \"ID\":1,\r\n                     \"Number\":1,\r\n                     \"EntityType\":1\r\n                  },\r\n                  \"Type\":1,\r\n                  \"CompanyName\":1,\r\n                  \"FirstName\":1,\r\n                  \"MiddleName\":1,\r\n                  \"LastName\":1,\r\n                  \"Phone\":1,\r\n                  \"Email\":1,\r\n                  \"Creator\":1,\r\n                  \"CreationDate\":1,\r\n                  \"ModifiedBy\":1,\r\n                  \"LastModifyDate\":1\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}"
						},
						"url": {
							"raw": "{{BaseURL}}/Data.svc/json/AuditLogRead",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Data.svc",
								"json",
								"AuditLogRead"
							]
						},
						"description": "Use the `AuditLogRead` method to search for audit log records in the database."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "96afba58-09a1-4391-ad6d-3a09e7926a16",
				"type": "text/javascript",
				"exec": [
					"// This script checks to see if there is a valid token in",
					"// the environment before making any requests to the API",
					"// by calling the TokenValid method. If there is already a",
					"// valid token, it does nothing. If there is no token or if",
					"// the token is not valid, it attempts to obtain a new one",
					"// by calling the Authenticate method, and if successful, ",
					"// saves the token to the environment.",
					"",
					"// Get the API URL and check to make sure it is non-empty",
					"const baseURL = pm.environment.get(\"BaseURL\");",
					"if(!baseURL) {",
					"    console.error(\"The BaseURL environment variable is not set.\");",
					"    return;",
					"}",
					"",
					"// If we are calling the Authenticate, TokenValid, or GetSystemInfo",
					"// methods, we don't need a valid token and can skip the rest",
					"let path = pm.request.url.getPath().toLowerCase();",
					"if(path.endsWith(\"authenticate\") ",
					"   || path.endsWith(\"tokenvalid\")",
					"   || path.endsWith(\"getsysteminfo\")) {",
					"    return;",
					"}",
					"",
					"// Check to see if there is already a Token in the environment variable",
					"let token = pm.environment.get(\"Token\");",
					"if(token) {",
					"    // If there is a Token, see if it is still valid",
					"    DoTokenValidRequest(token);",
					"} else {",
					"    // If there is no Token, just call Authenticate",
					"    DoAuthenticateRequest();",
					"}",
					"",
					"//----------------",
					"//Helper Functions",
					"//----------------",
					"",
					"// Calls the TokenValid method",
					"function DoTokenValidRequest(token) {",
					"    console.info(\"Checking to see if token is valid...\");",
					"    // Construct the TokenValid request",
					"    let tokenValidRequest = {",
					"      url: pm.environment.get(\"BaseURL\") + \"/Data.svc/json/TokenValid\",",
					"      method: \"POST\",",
					"      body: {",
					"        mode: \"raw\",",
					"        raw: JSON.stringify({ \"Token\" : pm.environment.get(\"Token\") })",
					"      }",
					"    };",
					"    ",
					"    // Send the TokenValid request to the API",
					"    pm.sendRequest(tokenValidRequest, HandleTokenValidResponse); ",
					"}",
					"",
					"// Handles the TokenValid method response, and calls the ",
					"// Authenticate method if necessary.",
					"function HandleTokenValidResponse(err, res) {",
					"    if(err || !res) {",
					"        // Something went wrong when trying to call the API",
					"        console.error(\"An error occurred when trying to call the TokenValid method.\");",
					"    } else {",
					"        // Check to see if the method was successful",
					"        let jsonData = res.json();",
					"        if(jsonData.Code === 0) {",
					"            console.info(\"The current token is valid.\");",
					"        } else {",
					"            DoAuthenticateRequest();",
					"        }",
					"    }",
					"}",
					"",
					"// Calls the Authenticate method",
					"function DoAuthenticateRequest() {",
					"    // The token is not valid, so we will try to get a new one.",
					"    // Create the Authenticate request body.",
					"    console.info(\"Token is missing or invalid; requesting a new one...\");",
					"    let requestBody = {",
					"        \"Database\": pm.environment.get(\"Database\"),",
					"        \"UID\": pm.environment.get(\"UID\"),",
					"        \"Password\": pm.environment.get(\"Password\")",
					"    };",
					"    ",
					"    // Check to see if the VendorId and AppKey are set, and if",
					"    // they are, add them to the request.",
					"    if(pm.environment.get(\"VendorId\") && pm.environment.get(\"AppKey\")) {",
					"        requestBody.VendorId = pm.environment.get(\"VendorId\");",
					"        requestBody.AppKey = pm.environment.get(\"AppKey\");",
					"    }",
					"    ",
					"    // Create the request object",
					"    let authenticateRequest = {",
					"      url: pm.environment.get(\"BaseURL\") + \"/Data.svc/json/Authenticate\",",
					"      method: \"POST\",",
					"      body: {",
					"        mode: \"raw\",",
					"        raw: JSON.stringify(requestBody)",
					"      }",
					"    };",
					"    ",
					"    // Send the Authenticate request to the API",
					"    pm.sendRequest(authenticateRequest, HandleAuthenticateResponse);    ",
					"}",
					"",
					"// Handles the Authenticate method response and stores the",
					"// new token in the \"Token\" environment variable.",
					"function HandleAuthenticateResponse(err, res) {",
					"    if(err || !res) {",
					"        // The request failed",
					"        console.error(\"An error occurred when trying to call the Authenticate method.\");",
					"    } else {",
					"        // The request succeeded",
					"        let jsonData = res.json();",
					"        if(jsonData.Code === 0) {",
					"            // Store the new token in the environment variable",
					"            // so that we can use it in subsequent requests",
					"            console.info(\"Retrieved new token.\");",
					"            pm.environment.set(\"Token\", jsonData.Data.Token);",
					"        } else {",
					"            // A nonzero Code means that there was an error",
					"            console.error(\"Authentication failed. Check the credentials in the environment.\");",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7afdc073-0ffe-497e-8ce8-a61f52a4acae",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"pm.test(\"Response Code is 0\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.Code).to.eql(0);",
					"});",
					""
				]
			}
		}
	]
}